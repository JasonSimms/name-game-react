{"version":3,"sources":["ball1075.jpg","backg.jpg","letter.jsx","Column.jsx","GameOver.jsx","gameField.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","props","solved","isDragging","task","_this","this","isDragDisable","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","letter","id","index","isDragDisabled","provided","snapshot","Object","assign","className","draggableProps","dragHandleProps","ref","innerRef","content","Component","Column_templateObject","Title","h3","_templateObject2","List","_templateObject3","InnerList","nextProps","map","el","letter_task","key","isDraggingDisabled","React","Column","_this2","Column_Container","column","title","droppableId","isDropDisabled","droppableProps","Column_InnerList","placeholder","GameOver","src","family","alt","gameField_templateObject","checkWin","state","name","split","letters","bank","forEach","concat","push","initialData","columns","column-1","contentIds","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","column-2","column-3","column-4","letterBank","columnOrder","win","gameField","onDragEnd","result","_objectSpread3","destination","source","start","finish","newLetterIds","Array","from","splice","newColumn","objectSpread","newState","defineProperty","col","guess","join","replace","setState","newStart","finishLetterIds","newFinish","src_GameOver","gameField_Container","columnId","myLetters","Column_Column","App","gameField_gameField","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abf45798.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ball1075.9d541357.jpg\";","module.exports = __webpack_public_path__ + \"static/media/backg.f9a7c5e6.jpg\";","import React, { Component } from 'react'\r\nimport styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Container = styled.div`\r\nborder: 1px solid lightgrey;\r\nborder-radius: 5px;\r\npadding: 15px;\r\nmargin-bottom: 8px;\r\ntext-align: center;\r\nbackground-color: ${ props => \r\n  props.solved ?\r\n  'lightgreen' :\r\n  props.isDragging \r\n  ? 'white' \r\n  : 'lightblue'};\r\n\r\n`;\r\n\r\nexport default class task extends Component {\r\n  render() {\r\n    const isDragDisable = this.props.solved;\r\n\r\n    return (\r\n      <Draggable \r\n      draggableId={this.props.letter.id} \r\n      index={this.props.index}\r\n      isDragDisabled={isDragDisable}\r\n      >\r\n      {(provided, snapshot) => (\r\n        // snapshot.isDragging  // isDraggingOver\r\n        <Container\r\n\r\n        className = {this.props.solved ? \"solved-letter\" : \"unsolved-letter\"}\r\n        {...provided.draggableProps}\r\n        {...provided.dragHandleProps}\r\n        ref={provided.innerRef}\r\n        // innerRef={provided.innerRef}\r\n        isDragging={snapshot.isDragging}\r\n        >\r\n        <p> {this.props.letter.content}</p>\r\n      </Container>\r\n      )}\r\n      </Draggable>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Letter from \"./letter\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  margin: 8px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  width: 100px;\r\n \r\n`;\r\nconst Title = styled.h3`\r\n  padding: 8px;\r\n`;\r\nconst List = styled.div`\r\n  padding: 8px;\r\n  flex-grow: 1;\r\n  min-height: 100px;\r\n`;\r\n\r\nclass InnerList extends React.Component {\r\n  \r\n  shouldComponentUpdate(nextProps){\r\n    if (nextProps.content === this.props.content) return false;\r\n    else return true;\r\n  }\r\n  \r\n  render () {\r\n    return this.props.content.map((el, index) => (\r\n      <Letter key={el.id} index={index} solved={this.props.solved} isDraggingDisabled={this.props.solved} letter={el} />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default class Column extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Container\r\n      className={this.props.column.solved ? 'solved' : 'unsolved'}\r\n      >\r\n\r\n        <Title>{this.props.column.title}</Title>\r\n        <Droppable \r\n        droppableId={this.props.column.id}\r\n        isDropDisabled = { this.props.column.solved }\r\n\r\n        \r\n        >\r\n          {(provided, snapshot) => (\r\n            <List \r\n            ref={provided.innerRef}\r\n            // innerRef={provided.innerRef} \r\n            {...provided.droppableProps}>\r\n\r\n              <InnerList content={this.props.content} solved={this.props.solved}/>\r\n              {provided.placeholder}\r\n            </List>\r\n          )}\r\n        </Droppable>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport family from \"./ball1075.jpg\"\r\n\r\nconst GameOver = () => <div className=\"gameover\">\r\n  \r\n  <h1>Congratulations!</h1>\r\n  <h1> Bennett Nicholas Simms </h1>\r\n  <h2>Thanks for playing we look forward to sharing his upcoming arrival with you!</h2>\r\n  <br/>\r\n\r\n  <img className=\"family\" src={family} alt=\"Family\"/>\r\n  \r\n  </div>\r\n\r\nexport default GameOver;","import { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport Column from \"./Column\";\r\nimport GameOver from \"./GameOver\";\r\nimport styled from \"styled-components\";\r\nconst Container = styled.div`\r\n  display: flex;\r\n  font-family: \"Pacifico\", cursive, \"Helvetica Neue\", sans-serif;\r\n`;\r\n\r\nconst shuffle = array => {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst checkWin = state => {\r\n  if (\r\n    state[\"column-4\"].solved &&\r\n    state[\"column-3\"].solved &&\r\n    state[\"column-2\"].solved\r\n  )\r\n    return true;\r\n  else return false;\r\n};\r\n\r\n// BUILD LETTERS FOR LETTER BANK FROM A NAME\r\nlet name = \"BENNETTNICHOLASSIMMS\";\r\nname = name.split(\"\");\r\nlet letters = {};\r\nlet bank = [];\r\nname.forEach((el, index) => {\r\n  let id = el.concat(index);\r\n  bank.push(id);\r\n  letters[id] = { id, content: el };\r\n});\r\n\r\nlet initialData = {\r\n  columns: {\r\n    \"column-1\": {\r\n      id: \"column-1\",\r\n      title: \"Letter Bank\",\r\n      contentIds: shuffle(bank),\r\n      solved: false\r\n    },\r\n\r\n    \"column-2\": {\r\n      id: \"column-2\",\r\n      title: \"First\",\r\n      contentIds: [],\r\n      solved: false\r\n    },\r\n    \"column-3\": {\r\n      id: \"column-3\",\r\n      title: \"Middle\",\r\n      contentIds: [],\r\n      solved: false\r\n    },\r\n    \"column-4\": {\r\n      id: \"column-4\",\r\n      title: \"Last *try Simms ;-)\",\r\n      contentIds: [],\r\n      solved: false\r\n    }\r\n  },\r\n  letterBank: [\"column-1\"],\r\n  columnOrder: [\"column-2\", \"column-3\", \"column-4\"],\r\n  win: false\r\n};\r\n\r\ninitialData.letters = letters;\r\n\r\nexport default class gameField extends Component {\r\n  state = initialData;\r\n\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newLetterIds = Array.from(start.contentIds);\r\n      newLetterIds.splice(source.index, 1);\r\n\r\n      newLetterIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        contentIds: newLetterIds\r\n      };\r\n\r\n      let newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newColumn.id]: newColumn\r\n        }\r\n      };\r\n\r\n      let names = [\"column-2\", \"column-3\", \"column-4\"];\r\n\r\n      names.forEach(col => {\r\n        if (newState.columns[col].contentIds.length > 1)\r\n          newState.columns[col].guess = newState.columns[col].contentIds\r\n            .join(\"\")\r\n            .replace(/[0-9]/g, \"\");\r\n        if (col === \"column-2\" && newState.columns[col].guess === \"BENNETT\")\r\n          newState.columns[col].solved = true;\r\n\r\n        if (col === \"column-3\" && newState.columns[col].guess === \"NICHOLAS\")\r\n          newState.columns[col].solved = true;\r\n\r\n        if (col === \"column-4\" && newState.columns[col].guess === \"SIMMS\")\r\n          newState.columns[col].solved = true;\r\n      });\r\n\r\n      newState.win = checkWin(newState.columns);\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // move one column to another\r\n\r\n    const newLetterIds = Array.from(start.contentIds);\r\n    newLetterIds.splice(source.index, 1);\r\n\r\n    const newStart = {\r\n      ...start,\r\n      contentIds: newLetterIds\r\n    };\r\n\r\n    const finishLetterIds = Array.from(finish.contentIds);\r\n    finishLetterIds.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      contentIds: finishLetterIds\r\n    };\r\n\r\n    let newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish\r\n      }\r\n    };\r\n\r\n    let names = [\"column-2\", \"column-3\", \"column-4\"];\r\n    names.forEach(col => {\r\n      if (newState.columns[col].contentIds.length > 1)\r\n        newState.columns[col].guess = newState.columns[col].contentIds\r\n          .join(\"\")\r\n          .replace(/[0-9]/g, \"\");\r\n      if (col === \"column-2\" && newState.columns[col].guess === \"BENNETT\")\r\n        newState.columns[col].solved = true;\r\n      if (col === \"column-3\" && newState.columns[col].guess === \"NICHOLAS\")\r\n        newState.columns[col].solved = true;\r\n      if (col === \"column-4\" && newState.columns[col].guess === \"SIMMS\")\r\n        newState.columns[col].solved = true;\r\n    });\r\n\r\n    newState.win = checkWin(newState.columns);\r\n\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    if(this.state.win) return <GameOver />\r\n    else return ( \r\n      <DragDropContext\r\n        // onDragStart\r\n        // onDragUpdate\r\n        onDragEnd={this.onDragEnd}\r\n      >\r\n        <Container>\r\n          <div className=\"column\">\r\n            {this.state.letterBank.map(columnId => {\r\n              const column = this.state.columns[columnId];\r\n              const myLetters = column.contentIds.map(\r\n                el => this.state.letters[el]\r\n              );\r\n\r\n              return (\r\n                <Column\r\n                  key={column.title}\r\n                  title={column.title}\r\n                  column={column}\r\n                  content={myLetters}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"column\">\r\n            {this.state.columnOrder.map(columnId => {\r\n              const column = this.state.columns[columnId];\r\n              const myLetters = column.contentIds.map(\r\n                el => this.state.letters[el]\r\n              );\r\n\r\n              return (\r\n                <Column\r\n                  className=\"row\"\r\n                  key={column.title}\r\n                  title={column.title}\r\n                  column={column}\r\n                  content={myLetters}\r\n                  // isDragDisabled ={ true}\r\n                  solved={column.solved}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </Container>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport '@atlaskit/css-reset';\nimport Game from './gameField';\nimport background from './backg.jpg'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}